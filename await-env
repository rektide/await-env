#!/bin/sh

# we're going to loop until we see this var
var="$1"
testVar(){
	systemctl --user show-environment | grep -e "$var=." || return 1
	#return 0
}
while ! testVar
do
	sleep 1
done

# load the environment now that it for sure has the variable
systemctl --user show-environment | while read -r line
do
	eval "$line"
done

# remove the "var" we just looked for
shift

# run the specified command!
# exec will terminate this shell but run the command in the foreground
# it is one of the coolest features of shells!

# caveats:
# 1. there is a maximum limit to the number of arguments passed in- 17
# this is an implementation tradeoff to allow string quoting to work.
# there's probably better ways of doing this! lmk!

# ideally something like exec $* would be workable,
# but that specific command means `await-env MY_VAR sh -c "echo done"` would not work

if [ "$#" -gt 9 ]
then
	arg1="$1"
	[ -n "$1" ] && shift
	arg2="$1"
	[ -n "$1" ] && shift
	arg3="$1"
	[ -n "$1" ] && shift
	arg4="$1"
	[ -n "$1" ] && shift
	arg5="$1"
	[ -n "$1" ] && shift
	arg6="$1"
	[ -n "$1" ] && shift
	arg7="$1"
	[ -n "$1" ] && shift
	arg8="$1"
	[ -n "$1" ] && shift
	arg9="$1"
	exec "$arg1" "$arg2" "$arg3" "$arg4" "$arg5" "$arg6" $arg7" $arg8" "$arg9" "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
	# exec doesn't return! the shell terminates when it runs! this branch is done!
fi
exec "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
